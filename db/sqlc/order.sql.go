// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: order.sql

package db

import (
	"context"
)

const createOrder = `-- name: createOrder :one
INSERT INTO orders (
    client_id,
    rest_id
) VALUES (
    $1, $2
) RETURNING id, client_id, rest_id, created_at
`

type createOrderParams struct {
	ClientID int32 `json:"client_id"`
	RestID   int32 `json:"rest_id"`
}

func (q *Queries) createOrder(ctx context.Context, arg createOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, createOrder, arg.ClientID, arg.RestID)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.ClientID,
		&i.RestID,
		&i.CreatedAt,
	)
	return i, err
}

const createOrderItem = `-- name: createOrderItem :one
INSERT INTO order_items (
    order_id,
    dish_id,
    quantity
) VALUES (
    $1, $2, $3
) RETURNING id, order_id, dish_id, quantity
`

type createOrderItemParams struct {
	OrderID  int32 `json:"order_id"`
	DishID   int32 `json:"dish_id"`
	Quantity int32 `json:"quantity"`
}

func (q *Queries) createOrderItem(ctx context.Context, arg createOrderItemParams) (OrderItem, error) {
	row := q.db.QueryRowContext(ctx, createOrderItem, arg.OrderID, arg.DishID, arg.Quantity)
	var i OrderItem
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.DishID,
		&i.Quantity,
	)
	return i, err
}
