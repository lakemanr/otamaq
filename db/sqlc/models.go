// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2

package db

import (
	"database/sql/driver"
	"fmt"
	"time"
)

type DishEtag string

const (
	DishEtagBurgers  DishEtag = "burgers"
	DishEtagSushi    DishEtag = "sushi"
	DishEtagPizza    DishEtag = "pizza"
	DishEtagDesserts DishEtag = "desserts"
	DishEtagFastFood DishEtag = "fast_food"
)

func (e *DishEtag) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = DishEtag(s)
	case string:
		*e = DishEtag(s)
	default:
		return fmt.Errorf("unsupported scan type for DishEtag: %T", src)
	}
	return nil
}

type NullDishEtag struct {
	DishEtag DishEtag
	Valid    bool // Valid is true if DishEtag is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullDishEtag) Scan(value interface{}) error {
	if value == nil {
		ns.DishEtag, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.DishEtag.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullDishEtag) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.DishEtag), nil
}

type Client struct {
	ID        int32     `json:"id"`
	FullName  string    `json:"full_name"`
	Login     string    `json:"login"`
	CreatedAt time.Time `json:"created_at"`
}

type Dish struct {
	ID        int32     `json:"id"`
	Name      string    `json:"name"`
	RestID    int32     `json:"rest_id"`
	CreatedAt time.Time `json:"created_at"`
}

type DishTag struct {
	ID     int32    `json:"id"`
	DishID int32    `json:"dish_id"`
	Tag    DishEtag `json:"tag"`
}

type Order struct {
	ID        int32     `json:"id"`
	ClientID  int32     `json:"client_id"`
	RestID    int32     `json:"rest_id"`
	CreatedAt time.Time `json:"created_at"`
}

type OrderItem struct {
	ID       int32 `json:"id"`
	OrderID  int32 `json:"order_id"`
	DishID   int32 `json:"dish_id"`
	Quantity int32 `json:"quantity"`
}

type Restaurant struct {
	ID        int32     `json:"id"`
	Name      string    `json:"name"`
	CreatedAt time.Time `json:"created_at"`
}
