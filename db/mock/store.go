// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/lakemanr/otamaq/db/sqlc (interfaces: Store)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	db "github.com/lakemanr/otamaq/db/sqlc"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AddDishAmount mocks base method.
func (m *MockStore) AddDishAmount(arg0 context.Context, arg1 db.AddDishAmountParams) (db.Dish, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDishAmount", arg0, arg1)
	ret0, _ := ret[0].(db.Dish)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddDishAmount indicates an expected call of AddDishAmount.
func (mr *MockStoreMockRecorder) AddDishAmount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDishAmount", reflect.TypeOf((*MockStore)(nil).AddDishAmount), arg0, arg1)
}

// CreateClient mocks base method.
func (m *MockStore) CreateClient(arg0 context.Context, arg1 db.CreateClientParams) (db.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClient", arg0, arg1)
	ret0, _ := ret[0].(db.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClient indicates an expected call of CreateClient.
func (mr *MockStoreMockRecorder) CreateClient(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClient", reflect.TypeOf((*MockStore)(nil).CreateClient), arg0, arg1)
}

// CreateDish mocks base method.
func (m *MockStore) CreateDish(arg0 context.Context, arg1 db.CreateDishParams) (db.Dish, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDish", arg0, arg1)
	ret0, _ := ret[0].(db.Dish)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDish indicates an expected call of CreateDish.
func (mr *MockStoreMockRecorder) CreateDish(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDish", reflect.TypeOf((*MockStore)(nil).CreateDish), arg0, arg1)
}

// CreateOrder mocks base method.
func (m *MockStore) CreateOrder(arg0 context.Context, arg1 db.CreateOrderParams) (db.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", arg0, arg1)
	ret0, _ := ret[0].(db.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockStoreMockRecorder) CreateOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockStore)(nil).CreateOrder), arg0, arg1)
}

// CreateOrderItem mocks base method.
func (m *MockStore) CreateOrderItem(arg0 context.Context, arg1 db.CreateOrderItemParams) (db.OrderItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrderItem", arg0, arg1)
	ret0, _ := ret[0].(db.OrderItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrderItem indicates an expected call of CreateOrderItem.
func (mr *MockStoreMockRecorder) CreateOrderItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrderItem", reflect.TypeOf((*MockStore)(nil).CreateOrderItem), arg0, arg1)
}

// CreateOrderTx mocks base method.
func (m *MockStore) CreateOrderTx(arg0 context.Context, arg1 db.CreateOrderTxParams) (db.OrderTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrderTx", arg0, arg1)
	ret0, _ := ret[0].(db.OrderTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrderTx indicates an expected call of CreateOrderTx.
func (mr *MockStoreMockRecorder) CreateOrderTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrderTx", reflect.TypeOf((*MockStore)(nil).CreateOrderTx), arg0, arg1)
}

// CreateRestaurant mocks base method.
func (m *MockStore) CreateRestaurant(arg0 context.Context, arg1 string) (db.Restaurant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRestaurant", arg0, arg1)
	ret0, _ := ret[0].(db.Restaurant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRestaurant indicates an expected call of CreateRestaurant.
func (mr *MockStoreMockRecorder) CreateRestaurant(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRestaurant", reflect.TypeOf((*MockStore)(nil).CreateRestaurant), arg0, arg1)
}

// GetDish mocks base method.
func (m *MockStore) GetDish(arg0 context.Context, arg1 int32) (db.Dish, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDish", arg0, arg1)
	ret0, _ := ret[0].(db.Dish)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDish indicates an expected call of GetDish.
func (mr *MockStoreMockRecorder) GetDish(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDish", reflect.TypeOf((*MockStore)(nil).GetDish), arg0, arg1)
}

// ListRestaurants mocks base method.
func (m *MockStore) ListRestaurants(arg0 context.Context, arg1 db.ListRestaurantsParams) ([]db.Restaurant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRestaurants", arg0, arg1)
	ret0, _ := ret[0].([]db.Restaurant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRestaurants indicates an expected call of ListRestaurants.
func (mr *MockStoreMockRecorder) ListRestaurants(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRestaurants", reflect.TypeOf((*MockStore)(nil).ListRestaurants), arg0, arg1)
}
